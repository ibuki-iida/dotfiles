
# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           Functions           #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#


# git stashでよく使うコマンド集
alias gss='_git_stash_commands'
_git_stash_commands() {
  local actions=(
    'stash:_git_stash'
    'pop:_git_stash_pop'
    'stash一覧表示(list):_git_stash_list'
    'stash適用(apply):_fzf_git_stash_apply'
    'stashを名前を付けて保存(save):_git_stash_with_name'
    'stashをファイル単位で実行(push):_git_stash_each_file'
    'stashを削除(drop):_fzf_git_stash_drop'
  )
  local action=$(echo "${actions[@]}" | tr ' ' '\n' | fzf -d ':' --with-nth=1 | cut -d ':' -f 2,2)
  [ -n "$action" ] && eval "$action"
  print -s "$action"
}

_git_stash_list() {
  local stashNo=$(git stash list | fzf --preview 'echo {} | awk "{print \$1}" | tr -d ":" | xargs git stash show --color=always -p' | awk '{print $1}' | tr -d ':' )
  [ -z "$stashNo" ] && return 130
  git stash show --color=always -p $stashNo
}

_git_stash() {
  git stash
}

_git_stash_pop() {
  git stash pop
}

_git_stash_with_name() {
  echo "保存名を入力してくだい"
  read name
  test -z "${name}" && return
  git stash save -u "${name}"
}

_git_stash_each_file() {
  local targets=($(git ls-files -m -o --exclude-standard | sort | fzf --preview='bat --color=always {}'))
  [ -z "$targets" ] && return
  echo "保存名を入力してくだい"
  read name
  test -z "${name}" && return
  git stash push -u "${targets[@]}" -m "${name}"
}

_fzf_git_stash_apply() {
  local stashNo=$(git stash list | fzf --preview 'echo {} | awk "{print \$1}" | tr -d ":" | xargs git stash show --color=always -p' | awk '{print $1}' | tr -d ':' )
  test -z "${stashNo}" && return
  git stash apply "${stashNo}"
}

_fzf_git_stash_drop() {
  local stashNos=($(git stash list | fzf --preview 'echo {} | awk "{print \$1}" | tr -d ":" | xargs git stash show --color=always -p' | awk '{print $1}' | tr -d ':'  | tac))
  test -z "${stashNos}" && return
  printf "\e[36m======削除するstash一覧=====\e[m\n"
  for stashNo in ${stashNos[@]}; do
    /bin/echo -n "${stashNo} "
    git log --color=always --oneline ${stashNo} | head -n 1
  done
  printf "\e[36m============================\e[m\n"
  printf "\e[36m本当に削除してよろしいですか？(y/n)\e[m"
  read answer
  if [ "$answer" = 'y' ];then
    for stashNo in ${stashNos[@]}; do
      git stash drop "${stashNo}"
    done
  fi
}

alias cld='_clipboard_diff'
_clipboard_diff() {
  local PATH_CLIP_LOG_DIR=~/.cliplog
  local clipLogs=($(ls -t $PATH_CLIP_LOG_DIR | fzf --prompt "CHOOSE" --preview "cat $PATH_CLIP_LOG_DIR/{}" --preview-window=right:80%))
  [ ${#clipLogs[@]} -ne 2 ] && return
  local selectFiles=''
  for clipLog in ${clipLogs[@]}; do
    selectFiles="${selectFiles} ${PATH_CLIP_LOG_DIR}/${clipLog}"
  done
  echo "$selectFiles"
  [ -z "$selectFiles" ] && return
  vimdiff $(echo "$selectFiles")
}

# デスクトップ上アイコンの表示/非表示を切り替える
alias dt='_toggle_desktop_icon_display'
_toggle_desktop_icon_display() {
  local isDisplay=$(defaults read com.apple.finder CreateDesktop)
  if [ $isDisplay -eq 1 ]; then
    defaults write com.apple.finder CreateDesktop -boolean false && killall Finder
  else
    defaults write com.apple.finder CreateDesktop -boolean true && killall Finder
  fi
}

# 囲まれた文字のみを抽出
alias tgrep='_grep_surround_word'
_grep_surround_word() {
  # 正規表現の特殊文字をエスケープ
  local escape='
    s/*/\\\*/g;
    s/+/\\\+/g;
    s/\./\\\./g;
    s/?/\\\?/g;
    s/{/\\\{/g;
    s/}/\\\}/g;
    s/(/\\\(/g;
    s/)/\\\)/g;
    s/\[/\\\[/g;
    s/\]/\\\]/g;
    s/\^/\\\^/g;
    s/|/\\\|/g;
    '
  local firstWord=`echo "$1" | sed "$escape"`
  local lastWord=`echo "$2" | sed "$escape"`
  grep -oP "(?<=$firstWord).*(?=$lastWord)"
}

# seleniumの操作リスト
alias sell='_fzf_selenium'
_fzf_selenium() {
  local action=`cat <<- EOF | fzf-tmux -p
		status
		log
		up
		stop
	EOF`
  [ -z "$action" ] && return
  local execCommand
  case $action in
    'status' )
      execCommand="ps aux | grep -v grep | grep -c selenium"
      ;;
    'log' )
      local LOG_DIR=~/.selenium-log
      local latest_selenium_log=$(echo $(ls -t $LOG_DIR | head -n 1))
      execCommand="tail -f $LOG_DIR/$latest_selenium_log"
      ;;
    'up' )
      local LOG_DIR=~/.selenium-log
      if [ ! -e $LOG_DIR ]; then
        mkdir $LOG_DIR
      fi
      local is_run=`ps aux | grep -v grep | grep -c selenium`
      local today=`date +%Y-%m-%d`
      if [ $is_run -eq 0 ]; then
        execCommand="java -jar /Library/java/Extensions/selenium-server-standalone-3.4.0.jar > ${LOG_DIR}/${today}.log 2>&1 &"
      fi
      ;;
    'stop' )
      execCommand="ps aux | grep selenium | grep -v grep | awk '{print \$2}' | xargs kill -9"
      ;;
  esac
  print -s "$execCommand"
  eval "$execCommand"
}

# masterブランチを最新にする
alias update_master='_update_master'
_update_master() {
  git checkout master
  git fetch --all
  git pull --rebase origin master
}

# お天気情報を出力する
alias tenki='_tenki'
_tenki() {
  local place=${1:-kanagawa}
  curl -4 http://wttr.in/${place}
  # finger ${place}@graph.no
}

# vagrantのコマンドをfzfで選択
alias vgg='_fzf_vagrant'
_fzf_vagrant() {
  local selectCommand=`cat <<- EOF | fzf-tmux -p
		vagrant ssh
		vagrant up
		vagrant provision
		vagrant reload
		vagrant halt
		vagrant reload&provision
		vagrant global-status
	EOF`
  test -z "$selectCommand" && return
  local arg=`echo $selectCommand | sed "s/vagrant //g"`
  case "${arg}" in
    'ssh' )
      vagrant ssh
      ;;
    'up' )
      vagrant up
      ;;
    'provision' )
      vagrant provision
      ;;
    'reload' )
      vagrant reload
      ;;
    'halt' )
      vagrant halt
      ;;
    'global-status' )
      vagrant global-status
      ;;
    'reload&provision' )
      vagrant reload
      vagrant provision
      ;;
    *) echo "${arg} Didn't match anything"
  esac
}

# コマンド実行配下にパスワードなど漏れると危険な単語が入力されていないかをチェック
alias check_danger_input='_check_danger_input'
_check_danger_input() {
  for danger_word in `cat ~/danger_words.txt`; do
  echo $danger_word
    ag --ignore-dir=vendor $danger_word ./*
  done
}

# 文字画像を生成。第一引数に生成したい文字を指定。
alias create_bg_img='_create_bg_img'
_create_bg_img() {
  local sizeList=(75x75 100x100 320x240 360x480 500x500 600x390 640x480 720x480 1000x1000 1024x768 1280x960)
  local sizes=($(echo ${sizeList} | tr ' ' '\n' | fzf-tmux -p))
  local backgroundColor="#000000"
  local fillColor="#ff8ad8" # 文字色
  # フォントによっては日本語対応しておらず「?」になってしまうので注意
  local fontPath=/System/Library/Fonts/ヒラギノ丸ゴ\ ProN\ W4.ttc
  local default_caption='(･∀･)'
  local caption=${1:-$default_caption}
  for size in ${sizes[@]}; do
    local imgPath=~/Desktop/${size}.png
    echo $imgPath
    convert \
      -size $size  \
      -background $backgroundColor\
      -fill $fillColor \
      -font $fontPath \
      caption:$caption \
      $imgPath
  done
}

# gmailを既読を付けずにタイトルだけ表示
alias gmail='_gmail'
_gmail() {
  local USER_ID=`cat ~/account.json | jq -r '.gmail.user_id'`
  local PASS=`cat ~/account.json | jq -r '.gmail.pass'`
  curl -u ${USER_ID}:${PASS} --silent "https://mail.google.com/mail/feed/atom" \
    | tr -d '\n' \
    | awk -F '<entry>' '{for (i=2; i<=NF; i++) {print $i}}' \
    | sed -n "s/<title>\(.*\)<\/title.*name>\(.*\)<\/name>.*/\2 - \1/p"
}

# 定義済み関数をfzfで中身を見ながら出力する
alias func='_show_functions'
_show_functions() {
  local func=$(
     typeset -f \
     | grep ".*() {$" \
     | grep "^[a-z_]" \
     | tr -d "() {"   \
     | fzf-tmux -p80% --preview "source ~/.zshrc; typeset -f {}"
   )
  if [ -z "$func" ]; then
    return
  fi
  typeset -f $func
}

# cddの履歴クリーン。存在しないPATHを履歴から削除
alias clear_cdr_cache='_clear_cdr_cache'
_clear_cdr_cache() {
  # while文はforkされて別プロセスで実行されるため、while文中の変数が使えない
  # そのため別関数として切り出す
  local getDeleteNumbers() {
    local delete_line_number=1
    local delete_line_numbers=()
    while read line; do
      ls $line >/dev/null 2>&1
      if [ $? -eq 1 ]; then
        # 削除する際、上から順に削除すると行番号がずれるので逆順で配列に入れる
        delete_line_numbers=($delete_line_number "${delete_line_numbers[@]}" )
      fi
      delete_line_number=$(expr $delete_line_number + 1)
    done
    echo "${delete_line_numbers[@]}"
  }

  local history_cache=~/.cache/cdr/history
  local delete_line_numbers=($(cat $history_cache | tr -d "$" | tr -d "'" | getDeleteNumbers))
  for delete_line_number in "${delete_line_numbers[@]}"
  do
    printf "\e[31;1m$(sed -n ${delete_line_number}p $history_cache)\n"
    sed -i '' -e "${delete_line_number}d" $history_cache
  done
}

alias viw='_open_path_by_vim'
_open_path_by_vim() {
  vim "$(which -p "$1")"
}

# fzfの出力をしてからvimで開く
alias vif='_fzf_vim'
_fzf_vim() {
  local excludeDirs=(
    node_modules
    .git
  )
  local excludeCmd
  for excludeDir in ${excludeDirs[@]}; do
    excludeCmd="$excludeCmd -type d -name "$excludeDir" -prune -o "
  done
  local files=($(eval find . $excludeCmd -type f -o -type l | fzf --preview "bat --color always {}"))
  [ -z "$files" ] && return
  vim -p "${files[@]}"
}



# builtin-commandsのmanを参照
alias manzsh='_man_builtin_command_zsh'
_man_builtin_command_zsh() {
  man zshbuiltins | less -p "^       $1 "
}

alias manbash='_man_builtin_command_bash'
_man_builtin_command_bash() {
  man bash | less -p "^       $1 "
}

# gitコマンドのmanを参照
alias mangit='_fzf_man_git'
_fzf_man_git() {
  local target=$(git help -a | awk '{print $1}' | grep -Ev '^[A-Z]' | sed '/^$/d' \
    | fzf \
      --preview "git help {} | head -n 100 " \
      --preview-window=right:80%
    )
  [ -z "$target" ] && return
  git help $target
  print -s "git help $target"
}

# ログインShellを切り替える
alias shell='_switch_login_shell'
_switch_login_shell() {
  local target=$(cat /etc/shells | grep '^/' | fzf-tmux -p)
  [ -z "$target" ] && return
  chsh -s $target
}

# インストール一覧コマンド集
alias list='_show_installed_list'
_show_installed_list() {
  local targets=`cat <<-EOS | fzf-tmux -p
	brew
	cask
	mas
	npm
	yarn
	gem
	pip
	pip3
	EOS`
  [ -z "$targets" ] && return
  echo "$targets" | while read target; do
    local cmd=''
    case $target in
      'cask')
        cmd='brew cask list'
        ;;
      'npm')
        cmd='npm ls -g'
        ;;
      *) cmd="$target list"
    esac
    printf "\n\e[33m\$ $cmd\e[m\n"
    eval $cmd
  done
}

# phpbrewによるphpバージョン切り替え
alias phpp='_fzf_phpbrew'
_fzf_phpbrew() {
  local currentVersion=$(php -v)
  local selected=$(phpbrew list \
    | grep php \
    | tr -d ' ' \
    | tr -d '*' \
    | currentVersion=$(php -v) fzf-tmux -p --preview="echo '$(php -v)'" --preview-window=down:50%
  )
  [ -z "$selected" ] && return
  phpbrew use $selected
  echo '$ php -v' && php -v
}

# npmコマンドをfzfで実行
alias npp='_fzf_npm'
_fzf_npm() {
  if [ -f package.json ]; then
    local action=$(cat package.json | jq -r '.scripts | keys | .[]' \
      | fzf-tmux -p80% --preview "cat package.json | jq -r '.scripts[\"{}\"]'" --preview-window=up:1)
    [ -z "$action" ] && return
    npm run $action
    print -s "npm run $action"
  else
    echo 'Not Found package.json'
  fi
}

# sedで一括置換
alias rsed='_replace_all'
_replace_all() {

  if [ $# -ne 2 ];then
    echo 'Usage: _replace_all $search $replace'
    return
  fi

  find . -type f -print0 | xargs -0 gsed -i -e "s/$1/$2/"
}

# fzfでrm
alias rmm='_rmm'
_rmm() {
  for removeFile in $(find . -maxdepth 1 -type d \( -name node_modules -o -name .git \) -prune -o -type f \
    | sort \
    |  fzf-tmux -p80% \
    --bind "f1:reload(find . -maxdepth 1 -type d \( -name node_modules -o -name .git \) -prune -o -type f | sort)" \
    --bind "f2:reload(find . -maxdepth 2 -type d \( -name node_modules -o -name .git \) -prune -o -type f | sort)" \
    --bind "f3:reload(find . -maxdepth 3 -type d \( -name node_modules -o -name .git \) -prune -o -type f | sort)" \
    --bind "f5:reload(find . -type d \( -name node_modules -o -name .git \) -prune -o -type f | sort)" \
    --preview='bat --color=always {}'
  )
  do
    echo "$removeFile"
    rm "$removeFile"
  done
}

# fzfでyarn
# カレントディレクトリにpackege.jsonがある場合はそれを利用。なければgit管理化のrootにあるpackage.jsonを利用
alias yy='_fzf_yarn'
_fzf_yarn() {
  local packageJson=$(find ./ -maxdepth 1  -name 'package.json')
  if [ -z "$packageJson" ]; then
    local gitRoot=$(git rev-parse --show-cdup)
    packageJson=$(find ${gitRoot}. -maxdepth 2  -name 'package.json')
  fi
  [ -z "$packageJson" ] && return
  local action=$(cat ${packageJson} | jq -r '.scripts | keys | .[]' \
    | fzf-tmux -p --preview "cat ${packageJson} | jq -r '.scripts[\"{}\"]'" --preview-window=up:1)
  [ -z "$action" ] && return
  print -s "yarn $action"
  yarn $action
}

# fzfでcomposer
alias coo='_fzf_composer'
_fzf_composer() {
  local composerJson=$(find ./ -maxdepth 1  -name 'composer.json')
  if [ -z "$composerJson" ]; then
    local gitRoot=$(git rev-parse --show-cdup)
    composerJson=$(find ${gitRoot}. -maxdepth 2  -name 'composer.json')
  fi
  [ -z "$composerJson" ] && return
  local action=$(cat ${composerJson} | jq -r '.scripts | keys | .[]' \
    | fzf-tmux -p --preview "cat ${composerJson} | jq -r '.scripts[\"{}\"]'" --preview-window=up:3)
  [ -z "$action" ] && return
  composer $action
  print -s "composer $action"
}


# fzfでcarthage
alias car='_fzf_carthage'
_fzf_carthage() {
  local gitRoot=$(git rev-parse --show-cdup)
  local cartfile=$(find ${gitRoot}. -maxdepth 1  -name 'Cartfile')
  [ -z "$cartfile" ] && echo 'Carfile is not found' && return
  local packages=$(cat ${cartfile} | grep -oP '(?<=/).*(?=")')
  local target=$(echo "全てupdate\n${packages}" | fzf-tmux -p --preview "grep {} $cartfile" --preview-window=up:1)
  [ -z "$target" ] && return
  if ! grep $target $cartfile >/dev/null ; then
    carthage update --platform ios
  else
    carthage update --platform ios $target
  fi
}

# modifiedとuntrachedのファイルをfzfで選択して開く
alias vimg='_fzf_vim_git_modified_untracked'
_fzf_vim_git_modified_untracked() {
  local files=($(git ls-files -m -o --exclude-standard | sort | fzf-tmux -p80% --preview='git diff --exit-code {} >/dev/null && bat --color always {} || git diff --color=always $(git rev-parse --show-cdup){} | diff-so-fancy') )
  [ -z "$files" ] && return
  vim -p "${files[@]}"
}

# ブランチ間の差分ファイルをfzfで選択して開く
alias vimd='_fzf_vim_git_diff_branch'
_fzf_vim_git_diff_branch(){
  local parent=$(git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -1 | awk -F'[]~^[]' '{print $2}')
  local current=$(git branch --show-current)
  local targets=($(git diff --name-only $parent $current | fzf-tmux -p80% --preview='git diff --exit-code {} >/dev/null && bat --color always {} || git diff --color=always $(git rev-parse --show-cdup){} | diff-so-fancy'))
  [ -z "$targets" ] && return
  vim -p "${targets[@]}"
}

# vimメモ帳
alias memo='_memo'
_memo() {
  local MEMO_PATH=~/memo.md
  local today=`date '+%Y/%m/%d(%a)'`
  if ! grep "# $today" $MEMO_PATH >/dev/null ; then
    echo "\n# $today" >> $MEMO_PATH
  fi
  # 最下行を一番上にしてvimを開く (:help scroll-cursor)
  echo "Gzt" | vim -s - $MEMO_PATH
}

alias pmux='_popuptmux'
_popuptmux() {
  if [ "$(\tmux display-message -p -F "#{session_name}")" = "popup" ];then
    tmux detach-client
  else
    tmux popup -E "\tmux attach -t popup || \tmux new -s popup"
  fi
}

alias imgcatt='_imgcat_for_tmux'
_imgcat_for_tmux() {
  # @See: https://qastack.jp/unix/88296/get-vertical-cursor-position
  get_cursor_position() {
    old_settings=$(stty -g) || exit
    stty -icanon -echo min 0 time 3 || exit
    printf '\033[6n'
    pos=$(dd count=1 2> /dev/null)
    pos=${pos%R*}
    pos=${pos##*\[}
    x=${pos##*;} y=${pos%%;*}
    stty "$old_settings"
  }
  clear
  command imgcat "$1"
  [ $? -ne 0 ] && return
  [ ! "$TMUX" ] && return
  get_cursor_position
  # 2行分画像が残ってしまうためtputで再描画判定させて消す
  read && tput cup `expr $y - 2` 0
}

_show_commit_only_current_branch() {
  local currentBranch=$(git branch --show-current)
  local compareBranch=$(git branch -a | grep -v $currentBranch | tr -d ' ' | fzf --prompt "Select the branch to compare >" --preview "git cherry -v {}")
  [ -z "$compareBranch" ] && return
  git cherry -v $compareBranch
}

# plistファイルをjsonで出力
alias plist_to_json='_plist_to_json'
_plist_to_json() {
  plutil -convert json $1 -o -
}

# 指定のSystemPreferenceを表示する
alias sp='_show_preference'
_show_preference() {
  # @see https://developer.apple.com/documentation/devicemanagement/systempreferences
  local pane_id=$(cat << EOS | fzf --delimiter '\.' --with-nth -1
com.apple.ClassroomSettings
com.apple.Localization
com.apple.preference.datetime
com.apple.preference.desktopscreeneffect
com.apple.preference.digihub.discs
com.apple.preference.displays
com.apple.preference.dock
com.apple.preference.energysaver
com.apple.preference.expose
com.apple.preference.general
com.apple.preference.ink
com.apple.preference.keyboard
com.apple.preference.mouse
com.apple.preference.network
com.apple.preference.notifications
com.apple.preference.printfax
com.apple.preference.screentime
com.apple.preference.security
com.apple.preference.sidecar
com.apple.preference.sound
com.apple.preference.speech
com.apple.preference.spotlight
com.apple.preference.startupdisk
com.apple.preference.trackpad
com.apple.preference.universalaccess
com.apple.preferences.AppleIDPrefPane
com.apple.preferences.appstore
com.apple.preferences.Bluetooth
com.apple.preferences.configurationprofiles
com.apple.preferences.extensions
com.apple.preferences.FamilySharingPrefPane
com.apple.preferences.icloud
com.apple.preferences.internetaccounts
com.apple.preferences.parentalcontrols
com.apple.preferences.password
com.apple.preferences.sharing
com.apple.preferences.softwareupdate
com.apple.preferences.users
com.apple.preferences.wallet
com.apple.prefpanel.fibrechannel
com.apple.prefs.backup
com.apple.Xsan
EOS
)
  [ -z "$pane_id" ] && return
  osascript << EOS
    tell application "System Preferences"
      set show all to true
      activate
      set current pane to pane id "$pane_id"
    end tell
EOS
}

# 禅モード
# Dock非表示、Desktopアイコン非表示、itermの大きさ変更
alias goyo='_goyo'
_goyo() {
  . ~/Documents/github/macos-scripts/desktop_background "/System/Library/Desktop Pictures/Solid Colors/Black.png"
  . ~/Documents/github/macos-scripts/menu_bar 0
  . ~/Documents/github/macos-scripts/dock
  . ~/Documents/github/macos-scripts/desktop_icon 0
  sh ~/Documents/github/iterm-scripts/iterm.sh window large
}

alias goyo!='_goyo!'
_goyo!() {
  . ~/Documents/github/macos-scripts/menu_bar 1
  . ~/Documents/github/macos-scripts/dock
  . ~/Documents/github/macos-scripts/desktop_icon 1
}

# ブログ用のkeynoteファイルを開く
alias bb='_open_blog_keynote'
_open_blog_keynote() {
  local targets=$(cat << EOS
$HOME/Documents/github/blog-assets/blog_header_image.key
$HOME/Documents/github/keynote-template/myshape.key
$HOME/Documents/github/keynote-template/wallpaper.key
EOS
)
  local target=$(echo "${targets}"| fzf)
  [ -z "$target" ] && return
  osascript <<EOS
tell application "Keynote"
  activate
  open "$target"
end tell
EOS
}

alias gif_to_mp4='_gif_to_mp4'
_gif_to_mp4() {
  local gif=${1}
  local mp4=${2:-video.mp4}
  [ -z "$gif" ] && return
  ffmpeg -i $gif -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" $mp4
}

alias terr="_terraform_execute"
_terraform_execute() {
  local cmd=$(terraform -help | grep '^  \S' | sed 's/  //' | fzf --with-nth=1 --preview='echo {2..}' --preview-window=up:1  | awk '{print $1}')
  [ -z "$cmd" ] && return
  print -s "terraform $cmd $1"
  terraform $cmd $1
}

alias opp="_open_localhost"
_open_localhost() {
  local port=$(netstat -Watnlv | grep 'LISTEN' | awk '{"ps -ww -o args= -p" $9 | getline procname; print $4 "||" procname}' | column -t -s '||' \
  | fzf --with-nth 1.. --preview="echo {1} | awk -F '.' '{print \$NF}' | xargs -I{} curl -I http://localhost:{}"  --preview-window=up:10 \
  | awk '{print $1}' | awk -F '.' '{print $NF}')
  [ -z "$port" ] && return
  open http://localhost:$port
}

alias gbd='_git_branch_diff'
_git_branch_diff() {
  local current=$(git branch --show-current)
  local target=$(git branch -a | tr -d ' ' | fzf --preview="git diff --color=always {} ${current}")
  [ -z "$target" ] && return
  git diff $target $current | delta --side-by-side
}

# c#ファイル(.cs)をコンパイルして実行
# ln -s /Library/Frameworks/Mono.framework/Versions/Current/bin/mono /usr/local/bin
# ln -s /Library/Frameworks/Mono.framework/Versions/Current/bin/mcs /usr/local/bin
# をあらかじめ実行していること。VisualStudio2019をインストールすれば入る。
alias ms='_mcs_and_mono'
_mcs_and_mono() {
  local fileName=${1/\.*/}
  mcs $1
  mono ${fileName}.exe
}

# 画像に枠線を追加
alias imgBorder='_add_border_to_image'
_add_border_to_image() {
  local image=$1
  local color=${2:-a0a8a9}
  local borderWeight=${3:-10}
  local width=$(sips -g pixelWidth $1 | awk -F ' ' '{print $2}' | tr -d '\n')
  local height=$(sips -g pixelHeight $1 | awk -F ' ' '{print $2}' | tr -d '\n')
  local borderWidth=$(expr $width + $borderWeight)
  local borderHeight=$(expr $height + $borderWeight)
  sips -p $borderHeight $borderWidth --padColor $color $image -o border_${image}
}

# neovimを更新
alias neovim_update='_neovim_nightly_update'
function _neovim_nightly_update() {
  cd ~/neovim
  git fetch --tags -f
  git checkout nightly
  sudo make CMAKE_INSTALL_PREFIX=$HOME/neovim/nvim install
}

# 本日変更があったファイルのみをls
alias lt=_ls_today
function _ls_today() {
  gls --full-time --time-style="+%Y-%m-%d %H:%M:%S" $1 | grep `date "+%F"`
}

# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           zshrc		        #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#

# Sample zshrc

ZPLUG_SUDO_PASSWORD=
ZPLUG_PROTOCOL=ssh

source $HOME/.zplug/init.zsh

zplug "b4b4r07/ultimate", as:theme
zplug 'b4b4r07/zplug-doctor', lazy:yes
zplug 'b4b4r07/zplug-cd', lazy:yes
zplug 'b4b4r07/zplug-rm', lazy:yes

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
    echo
fi

zplug load


# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           zshrc2		        #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#


# PATHがsource ~/.zshrcする度に重複して登録されないようにする
typeset -U path PATH

source_file() {
  [ -n "$1" ] && [ -f $1 ] && source $1
}

source_file ~/dotfiles/zsh/settings.zsh
source_file ~/dotfiles/zsh/exports.zsh
source_file ~/dotfiles/zsh/alias.zsh
source_file ~/dotfiles/zsh/function.zsh
source_file ~/.phpbrew/bashrc
# zshrc.localを読み込む(行末に書くことで設定を上書きする)
source_file ~/.zshrc.local
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

SCRIPT_DIR=$HOME/dotfiles

source $SCRIPT_DIR/zsh/plugins.zsh
source $SCRIPT_DIR/zsh/config.zsh
source $SCRIPT_DIR/zsh/settings.zsh
source $SCRIPT_DIR/zsh/exports.zsh
source $SCRIPT_DIR/zsh/alias.zsh
source $SCRIPT_DIR/zsh/function.zsh


# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           export		        #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#

# ==============================#
#            export             #
# ==============================#

# crontab -eでもvimを開くようにする
export EDITOR=nvim
# メモリに保存される履歴の件数
export HISTSIZE=1000
# 履歴ファイルに保存される履歴の件数
export SAVEHIST=100000
# history にコマンド実行時刻を記録する
export HIST_STAMPS="mm/dd/yyyy"
# 履歴ファイルの保存先
export HISTFILE=${HOME}/.zsh_history
# vimでESCを押した際のタイムラグをなくす
export KEYTIMEOUT=0
export LDFLAGS="-L/usr/local/opt/mysql@5.6/lib"
export CPPFLAGS="-I/usr/local/opt/mysql@5.6/include"
# neovim
export XDG_CONFIG_HOME="$HOME/.config"
# batのpager設定(brew install bat)
export BAT_PAGER="less -R"
# go getのインストール先
export GOPATH=$HOME/go
# gtagsでpygmentsを指定(多言語対応 e.g.) ruby, javascript)
export GTAGSLABEL=pygments
# 文字コードの指定
export LANG=ja_JP.UTF-8
# fzfのリストを上から並べ、全画面ではなくvimのquickfixライクにする
export FZF_DEFAULT_OPTS='
  --color fg:188,hl:103,fg+:222,bg+:234,hl+:104
  --color info:183,prompt:110,spinner:107,pointer:167,marker:215
  --height 70%
  --reverse
  --exit-0
  --multi
  --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all
  '
export MY_TARGET_GIT_DIR=(
  ~/dotfiles
  ~/scripts
  ~/Documents/github/*
)
# ggrepをgrepにするため
export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
export PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/python@2/bin:$PATH"
# gemでインストールしたものにPATHを通す
export PATH="/usr/local/lib/ruby/gems/2.5.0/bin:$PATH"
# pyenvにPATHを通す(これをしないとpyenv globalでバージョンが切り替えられない)
export PATH="$HOME/.pyenv/shims:$PATH"
# mysql8.0が入っていて、古いmysqlを使いたい場合必要
export PATH="/usr/local/opt/mysql@5.6/bin:$PATH"
# composerの設定
export PATH="$HOME/.config/composer/vendor/bin:$PATH"
# remoteAtomの設定
export PATH=$HOME/local/bin:$PATH
# phpenvの設定
export PATH="$HOME/.phpenv/bin:$PATH"
export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=$PATH:$GOPATH/bin
export PATH="/usr/local/Cellar/node/12.9.0/bin/:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
# 自作スクリプト
export PATH="$HOME/dotfiles/bin:$PATH"



# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           alias		        #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#




alias dot='cd ~/dotfiles'
alias vim='~/neovim/nvim/bin/nvim'
alias nvim='~/neovim/nvim/bin/nvim'
alias vi='~/neovim/nvim/bin/nvim'
alias ls='ls -G'
alias l='ls -1'
alias la='ls -laG'
alias laa='ls -ld .*'
alias ll='ls -lG'
alias lh='ls -lh'
alias grep='grep --color=auto'
alias ...='cd ../../'
alias ....='cd ../../../'
alias history='history 1'
alias his='eval $(\history 1 | cut -d " " -f 3- | tail -r | cut -d " " -f 2- | sed "s/^ //g" | fzf)'
alias time='/usr/bin/time -p'
alias ssh='TERM=xterm ssh'
alias tree='tree -N -a -I "\.DS_Store|\.git|node_modules|vendor"'
alias szsh='source ~/.zshrc'
alias stmux='tmux source-file ~/.tmux.conf'
alias tconf='vim ~/.tmux.conf'
alias hp='vim ~/.hyper.js'
alias plantuml='java -jar ~/.plantuml/plantuml.jar'
alias grepr='grep -r'
alias phpS='php -S localhost:9000'
alias phps='hyper-run -s localhost:9000 -t .'
alias js='osascript -l JavaScript'
alias clear='stty sane;clear'
alias gd='git diff -b'
alias gdc='git diff -b --cached'
alias gpl='git pull --rebase origin $(git branch | grep "*" | sed -e "s/^\*\s*//g")'
alias gcf='git clean -df'
alias repoo='vim `ls ~/Documents/github/develop_tools/DayReport/*.md | fzf`'
alias co='git checkout $(git branch -a | tr -d " " |fzf-tmux -p80% --prompt "CHECKOUT BRANCH>" --preview "git log --color=always {}" | head -n 1 | sed -e "s/^\*\s*//g" | perl -pe "s/remotes\/origin\///g")'
alias co-='git checkout -'
alias gst='git status'
alias gv='git remote -v'
alias gca='git checkout $(git diff --name-only)'
alias gcl='git clone'
alias gfa='git fetch --all'
# ctagsをbrew installしたものを使う
alias ctags='$(brew --prefix)/bin/ctags'
alias trans='trans -b en:ja'
alias transj='trans -b ja:en'
# ブラウザからコピーした時など、プレーンテキストに戻したい時に使用
alias pcopy='pbpaste | pbcopy'
# スプレッドシートから表をコピーしてRedmineのテーブル形式に整形したい時に使用(先頭と末尾に|を挿入,タブを|に置換)
alias rtable='pbpaste | tr "\t" "|" | sed -e "s/^/|/g" -e "s/$/|/g" -e "/|\"/s/|$//g" -e "/\"|/s/^|//g" | tr -d \" | pbcopy'
# modifiedのファイルを全てタブで開く
alias vims='vim -p `git diff --name-only`'
# Unite tabでコピーしたものをタブで開く
alias vimt="vim -p `pbpaste | sed 's/(\/)//g' | awk -F ':' '{print $2}' | grep -v '\[' | tr '\n' ' '`"
# 合計値を出す。列が一つのときのみ有効
alias tsum='awk "{sum += \$1}END{print sum}"'
# 最終更新日が一番新しいもののファイル名を取得
alias fin='echo `ls -t | head -n 1`'
# less `fin`と打つのが面倒だったため関数化。finはコマンドとして残しておきたいので残す
alias late='less $(echo `ls -t | head -n 1`)'
# 現在のブランチの番号のみを取得してコピーする
alias gget="git rev-parse --abbrev-ref HEAD | grep -oP '[0-9]*' | tr -d '\n' | pbcopy;pbpaste"
# 空行を削除
alias demp='sed "/^$/d"'
# 一時ファイル作成エイリアス
alias p1='pbpaste > ~/p1'
alias p2='pbpaste > ~/p2'
alias p1e='vim ~/p1'
alias p2e='vim ~/p2'
alias pd='vimdiff ~/p1 ~/p2'
alias pst='pstree | less -S'
alias oo='open .'
alias of='ls -1F | grep -v "/" | fzf --preview "bat --color=always {}" | xargs open'
alias hosts='sudo vim /etc/hosts'
alias mailque='postqueue -p'
alias maildel='sudo postsuper -d ALL deferred'
alias today="date '+%Y/%m/%d(%a)'"
# クリップボードの行数を出力
alias wcc='pbpaste | grep -c ^'
# vimをvimrcなし, プラグインなしで起動する
# NONEにvimrcのPATHを入れれば読み込むことができる
alias vimn='vim -u NONE -N'
alias pp='pbpaste'
alias pc='pbcopy'
# グローバルIPを確認
alias myip='curl ifconfig.io'
alias xcode-restore='update_xcode_plugins --restore'
alias xcode-unsign='update_xcode_plugins --unsign'
# wifiをON/OFFする
alias wifiConnect='networksetup -setairportpower en0 off && networksetup -setairportpower en0 on'
# printfの色出力を一覧表示
alias printColors='for fore in `seq 30 37`; do printf "\e[${fore}m \\\e[${fore}m \e[m\n"; for mode in 1 4 5; do printf "\e[${fore};${mode}m \\\e[${fore};${mode}m \e[m"; for back in `seq 40 47`; do printf "\e[${fore};${back};${mode}m \\\e[${fore};${back};${mode}m \e[m"; done; echo; done; echo; done; printf " \\\e[m\n"'
alias sshadd='ssh-add ~/.ssh/id_rsa'
alias ts='ts-node'
alias bll='bluetooth-fzf'
alias fa='find ./ -name'
# 半角文字のみの行を抽出する。-vをつければ全角文字の行のみ抽出する
alias hankaku="LANG=C grep '^[[:cntrl:][:print:]]*$'"
# gitで変更があったファイルのみ対象にagをかける
alias mag='git ls-files -m -o --exclude-standard  | xargs ag'
alias man='env LANG=C man'
# terminal上からGoogle検索
alias goo='search_by_google'
alias pj='pbpaste | jq'
alias ch='chrome_history'
alias gg='github'
alias cw='chatwork'
alias sqq='sequel_ace'
alias itt='sh ~/Documents/github/iterm-scripts/iterm.sh'
alias ios='open -a Simulator'




# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#      zsh-my-theme.zsh		    #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#




export LSCOLORS="dxfxcxdxbxegedabagacad"
export LS_COLORS='di=33;:ln=35;40:so=32;40:pi=33;40:ex=31;40:bd=34;46:cd=34;43:su=0;41:sg=0;46:tw=0;42:ow=0;43:'
export GREP_COLOR='1;33'

# PROMPTテーマ
setopt prompt_subst #プロンプト表示する度に変数を展開
local BLACK=$'%{\e[30m%}'
local RED=$'%{\e[31m%}'
local GREEN=$'%{\e[32m%}'
local YELLOW=$'%{\e[33m%}'
local BLUE=$'%{\e[34m%}'
local PURPLE=$'%{\e[35m%}'
local CYAN=$'%{\e[36m%}'
local GRAY=$'%{\e[37m%}'
local WHITE=$'%{\e[1;37m%}'
local DEFAULT=$'%{\e[1;m%}'
local RAINBOW=$'%{\e[$[color=$[31+$RANDOM%6]]m%}'

autoload -Uz vcs_info
zstyle ':vcs_info:git:*' check-for-changes true    # formats 設定項目で %c,%u が使用可
zstyle ':vcs_info:git:*' stagedstr "%F{red}"     # commit されていないファイルがある
zstyle ':vcs_info:git:*' unstagedstr "%F{red}"     # add されていないファイルがある
zstyle ':vcs_info:*' formats "%F{green}%b %c%u%m %f" # 通常
zstyle ':vcs_info:*' actionformats '[%b|%a]'     # rebase 途中,merge コンフリクト等 formats 外の表示
precmd () { vcs_info }
PROMPT="
${CYAN}%~%f"
PROMPT=$PROMPT'  ${vcs_info_msg_0_}
${GRAY}$ %f'

zstyle ':vcs_info:git+set-message:*' hooks git-is_clean git-untracked
# 状態がクリーンか判定
function +vi-git-is_clean(){
  if [ -z "$(git status --short 2>/dev/null)" ];then
    hook_com[misc]+="✔"
  fi
}
# unstaged, untrackedの検知
function +vi-git-untracked() {
  if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
    hook_com[unstaged]+='%F{red}✗%f'
  fi
}





# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           alias		        #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#



