# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           Setting		        #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#

bindkey -e # ctrl-aやctrl-eでカーソル移動
# zshのTab補完
autoload -U compinit && compinit
# テーマ読み込み
source ~/dotfiles/zsh/zsh-my-theme.zsh
# Tabで選択できるように
zstyle ':completion:*:default' menu select=2
# 補完で大文字にもマッチ
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# ファイル補完候補に色を付ける
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
setopt auto_param_slash     # ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt mark_dirs        # ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加
setopt auto_menu        # 補完キー連打で順に補完候補を自動で補完
setopt interactive_comments   # コマンドラインでも # 以降をコメントと見なす
setopt magic_equal_subst    # コマンドラインの引数で --prefix=/usr などの = 以降でも補完できる
setopt complete_in_word     # 語の途中でもカーソル位置で補完
setopt print_eight_bit    # 日本語ファイル名等8ビットを通す
setopt extended_history     # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt share_history      # 他のターミナルとヒストリーを共有
setopt histignorealldups    # ヒストリーに重複を表示しない
setopt hist_save_no_dups    # 重複するコマンドが保存されるとき、古い方を削除する。
setopt extended_history     # $HISTFILEに時間も記録
setopt print_eight_bit    # 日本語ファイル名を表示可能にする
setopt hist_ignore_all_dups   # 同じコマンドをヒストリに残さない
setopt auto_cd        # ディレクトリ名だけでcdする
setopt no_beep        # ビープ音を消す

# 特定のコマンドのみ履歴に残さない
zshaddhistory() {
  local line=${1%%$'\n'}
  local cmd=${line%% *}
  # 以下の条件をすべて満たすものだけをヒストリに追加する
  [[ ${#line} -ge 5
    && ${cmd} != (l|l[sal]$) # l,ls,la,ll
    && ${cmd} != (c|cd)
    && ${cmd} != (fg|fgg)
  ]]
}
# 現在行をvimで編集して実行する
edit_current_line() {
  local tmpfile=$(mktemp)
  local tmpVimCursor=~/tmp_vim_cursor
  echo "$BUFFER" > $tmpfile
  touch $tmpVimCursor

  # terminalでのカーソル位置をvimに反映
  local currentCursorLine=$(echo $LBUFFER | wc -l | tr -d ' ')
  local currentCursorCol=$(echo $LBUFFER | sed -n ${currentCursorLine}p | wc -m | tr -d ' ')
  nvim $tmpfile \
    -c "call cursor($currentCursorLine, $currentCursorCol)" \
    -c 'set filetype=zsh' \
    -c 'autocmd BufWritePost * :execute ":r! echo " . col(".") . "\t" . line(".") . "  > '${tmpVimCursor}'"'
  BUFFER="$(cat $tmpfile)"

  # vimでのカーソル位置をterminalに反映
  local x=$(expr $(awk '{print $1}' $tmpVimCursor) - 1)
  local y=$(awk '{print $2}' $tmpVimCursor)
  local strlen=0
  if [ $y -gt 1 ];then
    strlen=$(head -n $(expr $y - 1) $tmpfile | wc -m | tr -d ' ')
  fi
  CURSOR=$(expr $x + $strlen)

  rm $tmpfile
  rm $tmpVimCursor
  zle reset-prompt
}
zle -N edit_current_line
bindkey '^w' edit_current_line


# terraform補完
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform


# ==============================#
#								#
#								#
#								#
#								#
#								#
#								#
#           Functions           #
#								#
#								#
#								#
#								#
#								#
#								#
# ==============================#


# fgを使わずctrl+zで行ったり来たりする
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fgg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# fzf版cdd
# alias cdd='_fzf-cdr'
# _fzf-cdr() {
#   local target_dir=$(cdr -l  \
#     | sed 's/^[^ ][^ ]*  *//' \
#     | fzf-tmux -p80% --bind 'ctrl-t:execute-silent(echo {} | sed "s/~/\/Users\/$(whoami)/g" | xargs -I{} tmux split-window -h -c {})+abort' \
#         --preview "echo {} | sed 's/~/\/Users\/$(whoami)/g' | xargs -I{} ls -l {} | head -n100" \
#     )
#   # ~だと移動できないため、/Users/hogeの形にする
#   target_dir=$(echo ${target_dir/\~/$HOME} | tr -d '\')
#   if [ -n "$target_dir" ]; then
#     cd $target_dir
#   fi
# }

# ag & view
alias jump='_jump'
_jump(){
  if [ -n "$1" ]; then
    #pathと書くと$PATHと被ってエラーが出るので注意
    local file=$(ag $1 | fzf | awk -F ':' '{printf  $1 " +" $2}'| sed -e 's/\+$//')
    if [ -n "$file" ]; then
      # vim $fileのようにそのまま渡すと開けないので文字列で渡して実行
      eval "vim $file"
    fi
  fi
}


# git logをpreviewで差分を表示する
# -S "pattern"でpatternを含む差分のみを表示することができる
alias tigg='_git_log_preview_open'
_git_log_preview_open() {
  local hashCommit=$(git log --oneline "$@" \
    | fzf-tmux -p80% \
      --prompt 'SELECT COMMIT>' \
      --delimiter=' ' --with-nth 1.. \
      --preview 'git show --color=always {1}' \
      --bind 'ctrl-y:execute-silent(echo {} | awk "{print \$1}" | tr -d "\n" | pbcopy)' \
      --preview-window=right:50% \
      --height=100% \
    | awk '{print $1}'
  )
  # echo $hashCommit
  [ -z "$hashCommit" ] && return
  git show ${hashCommit}
}

# fzfを使ってプロセスKILL
alias pspk='_process_kill'
_process_kill(){
  local process=(`ps aux | awk '{print $2,$9,$11,$12}' | fzf-tmux -p80% | awk '{print $1}'`)
  echo $process | pbcopy
  for item in ${process[@]}
  do
    kill $process
  done
}

# git add をfzfでdiffを見ながら選択
alias gadd='_git_add'
_git_add(){
  local path_working_tree_root=$(git rev-parse --show-cdup)
  [ "$path_working_tree_root" = '' ] && path_working_tree_root=./
  local files=($(eval git -C $path_working_tree_root ls-files --modified --others --exclude-standard\
    | fzf-tmux -p80% --prompt 'modified' \
      --bind "U:reload(git ls-files --others --exclude-standard)+change-prompt(untracked)" \
      --bind "M:reload(git ls-files --modified)+change-prompt(modified)" \
      --bind "A:reload(git ls-files --modified --others --exclude-standard)+change-prompt(all)" \
      --preview "git diff --exit-code {} >/dev/null && bat --color always {} || git diff --color=always $(git rev-parse --show-cdup){} | diff-so-fancy" \
      --preview-window=right:50% \
    ))
  [ -z "$files" ] && return
  for file in "${files[@]}";do
    git add ${path_working_tree_root}${file}
  done
}

# git add -pをfzfでdiffを見ながら選択
alias gapp='_git_add-p'
_git_add-p(){
  local path_working_tree_root=$(git rev-parse --show-cdup)
  [ "$path_working_tree_root" = '' ] && path_working_tree_root=./
  local files=($(git -C $path_working_tree_root ls-files --modified \
    | fzf-tmux -p80% --prompt "ADD FILES>" --preview "git diff --color=always $(git rev-parse --show-cdup){} | diff-so-fancy" --preview-window=right:50% ))
  [ -z "$files" ] && return
  for file in "${files[@]}";do
    git add -p ${path_working_tree_root}${file}
  done
}

# git diff をfzfで選択
alias gdd='_git_diff'
_git_diff(){
  local path_working_tree_root=$(git rev-parse --show-cdup)
  [ "$path_working_tree_root" = '' ] && path_working_tree_root=./
  local files=($(git -C $path_working_tree_root ls-files --modified \
    | fzf-tmux -p80% --select-1 --prompt "SELECT FILES>" --preview 'git diff --color=always $(git rev-parse --show-cdup){} | diff-so-fancy' --preview-window=right:50% ))
  [ -z "$files" ] && return
  for file in "${files[@]}";do
    git diff -b ${path_working_tree_root}${file}
  done
}


# git checkout fileをfzfで選択
alias gcpp='_git_checkout'
_git_checkout(){
  local path_working_tree_root=$(git rev-parse --show-cdup)
  [ "$path_working_tree_root" = '' ] && path_working_tree_root=./
  local files=($(git -C $path_working_tree_root ls-files --modified \
    | fzf-tmux -p80% --prompt "CHECKOUT FILES>" --preview "git diff --color=always $(git rev-parse --show-cdup){} | diff-so-fancy" --preview-window=right:50%))
  [ -z "$files" ] && return
  for file in "${files[@]}";do
    git checkout ${path_working_tree_root}${file}
  done
}

# git resetをfzfでdiffを見ながら選択
alias grpp='_git_reset'
_git_reset() {
  local path_working_tree_root=$(git rev-parse --show-cdup)
  [ "$path_working_tree_root" = '' ] && path_working_tree_root=./
  local files=($(git -C $path_working_tree_root diff --name-only --cached \
    | fzf-tmux -p80% --prompt "RESET FILES>" --preview "git diff --cached --color=always $(git rev-parse --show-cdup){} | diff-so-fancy" --preview-window=right:50% ))
  [ -z "$files" ] && return
  for file in "${files[@]}";do
    git reset ${path_working_tree_root}${file}
  done
}

# あらかじめ指定したGitディレクトリを全て最新にする
alias upd='_update_dotfile'
_update_dotfile() {
  ls -1 ~/Documents/github | while read dir; do
    local dir=~/Documents/github/${dir}
    printf "\e[33m${dir}\e[m\n"
    git -C ${dir} pull --rebase origin master
  done
}
# あらかじめ指定したGitディレクトリを全てpushする
alias psd='_push_dotfile'
_push_dotfile() {
  ls -1 ~/Documents/github | while read dir; do
    local dir=~/Documents/github/${dir}
    printf "\e[33m${dir}\e[m\n"
    git -C ${dir} add -A
    git -C ${dir} commit -v
    git -C ${dir} push origin master
  done
}
# あらかじめ指定したGitディレクトリのgit statusを表示
alias std='_show_git_status_dotfile'
_show_git_status_dotfile() {
  for targetDir in ${MY_TARGET_GIT_DIR[@]}; do
    printf "\e[33m`basename ${targetDir}`\e[m\n"
    git -C ${targetDir} status
    echo ""
  done
}

# ファイルパス:行番号のようなものをvimで開く
viml() {
  pbpaste | IFS=':' read -A selected
  vim ${selected[1]} +${selected[2]}
}

alias maillog='_show_mail_log'
_show_mail_log() {
  log stream --predicate '(process == "smtpd") || (process == "smtp")' --info
}

# 記事メモコマンド
alias art='_write_article'
_write_article() {
  local ARTICLE_DIR=/Users/`whoami`/Documents/github/articles
  if [ "$1" = '-a' ];then
    local targetFile=$(find $ARTICLE_DIR -name "*.md" | fzf-tmux -p80% --delimiter 'articles' --with-nth  -1 --preview "bat --color=always {}")
    [ -z "$targetFile" ] && return
    vim $targetFile
    return
  fi
  local article=`ls ${ARTICLE_DIR}/*.md | xargs -I {} basename {} | fzf-tmux -p80% --preview "bat --color=always ${ARTICLE_DIR}/{}"`

  # 何も選択しなかった場合は終了
  if [ -z "$article" ]; then
    return 0
  fi

  if [ "$article" = "00000000.md" ]; then
    local tmpfile=$(mktemp)
    vim $tmpfile
    local title="$(cat $tmpfile | tr -d '\n')"
    rm $tmpfile

    local today=`date '+%Y_%m_%d_'`
    vim ${ARTICLE_DIR}/${today}${title}.md -c "call setline(1, '# ${title}')"
  else
    vim ${ARTICLE_DIR}/${article}
  fi
}
# 投稿した記事を別ディレクトリに移動
alias mpa='_move_posted_articles'
_move_posted_articles() {
  # 投稿完了を意味する目印
  local POSTED_MARK='完'
  # 下書き記事の保存場所
  local ARTICLE_DIR=/Users/`whoami`/Documents/github/articles
  # 投稿が完了した記事を保存するディレクトリ
  local POSTED_DIR=$ARTICLE_DIR/posted

  # 投稿が完了したファイルを別ディレクトリに移す
  ls $ARTICLE_DIR | while read file; do
    if tail -n 1 "${ARTICLE_DIR}/${file}" | grep $POSTED_MARK > /dev/null; then
      # git管理されていない場合失敗するので通常のmvを実行する
      git mv "${ARTICLE_DIR}/${file}" "$POSTED_DIR/" || mv "${ARTICLE_DIR}/${file}" "$POSTED_DIR/"
      printf "\e[33m${file} is moved!\e[m\n"
    fi
  done
}

# Redmine記法からmarkdown形式へ変換
alias rtm='_redmine_to_markdown'
_redmine_to_markdown() {
  sed "s/^# /1. /g" | \
  sed "s/h2./##/g"  | \
  sed "s/h3./###/g" | \
  sed "s/<pre>/\`\`\`zsh/g" | \
  sed "s/<\/pre>/\`\`\`/g"
}

# markdown記法からRedmine形式へ変換
alias mtr='_markdown_to_redmine'
_markdown_to_redmine() {
  local converted=$(pbpaste | \
  sed "s/^[0-9]\. /# /g" | \
  sed "s/###/h3./g" | \
  sed "s/##/h2./g"  | \
  sed "s/\`\`\`.*/<pre>/g"
  )
  # 偶数番目の<pre>を</pre>に変換
  local pre_line_numbers=(`echo "$converted" | grep -nP "^<pre>$" | sed 's/:.*//g'`)
  local cnt=0
  for pre_line_number in ${pre_line_numbers[@]};do
    if [ `expr $cnt % 2` -ne 0 ]; then
      converted=`echo "$converted" | sed "$pre_line_number s/<pre>/<\/pre>/g"`
    fi
    cnt=`expr $cnt + 1`
  done
  echo "$converted"
}

# 定義済みのaliasを表示
alias alist='_show_alias'
_show_alias() {
  local cmd=$(alias | sort | fzf-tmux -p80% )
  [ -z "$cmd" ] && return

  if $(echo $cmd | grep "'" > /dev/null) ; then # コマンドaliasの場合
    local cmdName=$(echo $cmd | grep -oP '.*=')
    local filePath lineNumber
    read filePath lineNumber <<< $(ag "alias $cmdName" ~/dotfiles/zsh | awk -F ':' '{print $1,$2}')
    vim $filePath +$lineNumber
  else # 関数aliasの場合
    local functionName=$(echo $cmd | awk -F '=' '{print $2}')
    [ -z "$functionName" ] && return

    local definePath=~/dotfiles/zsh/function.zsh
    local define=$(ag "${functionName}\(\)" $definePath | awk -F ':' '{print $1}')
    [ -z "$define" ] && return
    vim $definePath +${define}
  fi
}

# ランダムな文字列を生成。第一引数に桁数を指定。デフォルトは10。
alias randomStr='_generate_random_string'
_generate_random_string() {
  local length=${1:-10}
  cat /dev/urandom | base64 | fold -w $length | head -n 1
}

# ランダムな数値文字列を生成。第一引数に桁数を指定。デフォルトは4。
# 乱数ではなく数値文字列であることに注意。 ex.) "0134"
alias randomStrNum='_generate_random_number_str'
_generate_random_number_str() {
  local length=${1:-4}
  od -vAn -to1 </dev/urandom  | tr -d " " | fold -w $length | head -n 1
}

# 指定範囲内のランダムな整数を生成。第一引数に範囲を指定。デフォルトは100。
alias randomNum='_generate_random_number'
_generate_random_number() {
  local range=${1:-100}
  awk 'BEGIN{srand();print int(rand() * '"${range}"')}'
}

# 第一引数の文字列をバッジにする。tmux未対応。
alias ba='_set_badge'
_set_badge() {
  printf "\e]1337;SetBadgeFormat=%s\a"\
  $(echo -n "$1" | base64)
}


# Dockerコマンドをfzfで選択
alias dcc='_docker_commands'
_docker_commands() {
  local selectCommand=`cat <<- EOF | fzf-tmux -p80%
		docker exec -it
		docker exec -it --user root
		docker logs
		docker ps
		docker ps -a
		docker stop
		docker system df
		docker stats
		docker images -a
		docker-compose ps
		docker-compose up
		docker-compose up --build
		docker-compose up -d
		docker-compose up --build -d
		docker-compose up --build -d <service>
		docker-compose --compatibility up -d
		docker-compose up --force-recreate
		docker-compose stop
		docker rm
		docker rmi
		docker cp
	EOF`
  local arg=`echo $selectCommand | sed "s/docker //g"`
  local execCommand
  case "${arg}" in
    'exec -it' | 'exec -it --user root' )
      container=$(docker ps --format "{{.Names}}" | sort | fzf-tmux -p80%)
      test -z "$container" && return
      availableShells=$(docker exec -it $container cat /etc/shells)
      # bashが使えるならbashでログインする
      if  echo "$availableShells" | grep bash >/dev/null ; then
        execCommand="$selectCommand $container bash"
      else
        execCommand="$selectCommand $container $(echo "$availableShells" | tail -n 1 | tr -d '\r')"
      fi
      ;;
    'logs' )
      container=$(docker ps --format "{{.Names}}" | sort | fzf-tmux -p80%)
      test -z "$container" && return
      execCommand="docker logs -f --tail=100 $container"
      ;;
    'stop' )
      containers=($(docker ps --format "{{.Names}}" | sort | fzf-tmux -p80% ))
      [ "${#containers[@]}" -eq 0 ] && return
      for container in ${containers[@]}; do
        execCommand="docker stop $container"
        printf "\e[33m${execCommand}\e[m\n" && eval $execCommand
        print -s "$execCommand"
      done
      return
      ;;
    'rm' )
      containers=($(docker ps -a --format "{{.Names}}\t{{.ID}}\t{{.RunningFor}}\t{{.Status}}\t{{.Networks}}" \
        | column -t -s "`printf '\t'`" \
        | fzf-tmux -p80% --header "$(echo 'NAME\tCONTAINER_ID\tCREATED\tSTATUS\tNETWORK' | column -t)" \
        | awk '{print $2}' \
      ))
      for container in ${containers[@]}; do
        execCommand="docker rm $container"
        printf "\e[33m${execCommand}\e[m\n" && eval $execCommand
        print -s "$execCommand"
      done
      return
      ;;
    'rmi' )
      images=($(docker images | tail -n +2 \
        | fzf-tmux -p80% --header "$(echo 'REPOSITORY\tTAG\tIMAGE_ID\tCREATED\tSIZE' | column -t)"\
        | awk '{print $3}' \
      ))
      for image in ${images[@]}; do
        execCommand="docker rmi -f $image"
        printf "\e[33m${execCommand}\e[m\n" && eval $execCommand
        print -s "$execCommand"
      done
      return
      ;;
    'cp' )
      local targetFiles=($(find . -maxdepth 1 \
        | sed '/^\.$/d' \
        | fzf-tmux -p80% \
          --prompt='送信したいファイルを選択してください' \
          --preview='file {} | awk -F ":" "{print \$2}" | grep directory >/dev/null && tree --charset=C -NC {} || bat --color always {}'
      ))
      [ "${#targetFiles[@]}" -eq 0 ] && return
      docker ps --format "{{.Names}}" | fzf-tmux -p80% | while read container;do
        containerId=$(docker ps -aq --filter "name=$container")
        test -z "$containerId" && echo "Not found $container's Container ID." && continue

        for targetFile in "${targetFiles[@]}";do
          echo "$targetFile =====> ${container}(${containerId})"
          execCommand="docker cp ${targetFile} ${containerId}:/root/"
          printf "\e[33m${execCommand}\e[m\n" && eval $execCommand
          print -s "$execCommand"
        done
      done
      ;;
    'docker-compose up --build -d <service>' )
      local service=$(cat docker-compose.yml | yq --yaml-roundtrip ".services|keys" | sed 's/^- //g' | fzf)
      test -z "$service" && return
      execCommand="docker-compose up --build -d $service"
      printf "\e[33m${execCommand}\e[m\n"
      print -s "$execCommand"
      ;;
    *)
      local strLength=$(expr ${#selectCommand} + 4)
      local separateStr=$(for i in `seq 1 $strLength`;do /bin/echo -n '=' ; done)
      printf "\e[33m${separateStr}\n  ${selectCommand}  \n${separateStr}\e[m\n"
      eval $selectCommand
      ;;
  esac
  if [ -n "$execCommand" ];then
    print -s "$execCommand"
    local strLength=$(expr ${#execCommand} + 4)
    local separateStr=$(for i in `seq 1 $strLength`;do /bin/echo -n '=' ; done)
    printf "\e[33m${separateStr}\n  ${execCommand}  \n${separateStr}\e[m\n"
    eval $execCommand
  fi
}

# 自作スクリプト編集時、fzfで選択できるようにする
alias scc='_edit_my_script'
_edit_my_script() {
  local targetFiles=$(find ~/scripts -follow -maxdepth 1 -name "*.sh";ls -1 ~/.zshrc.local ~/.xvimrc)
  local selected=$(echo "$targetFiles" | fzf-tmux -p80% --preview '{bat --color always {}}')
  [ -z "$selected" ] && return
  vim $selected
}

# 自作スクリプトをfzfで選んで実行
alias ss='_source_my_script'
_source_my_script() {
  local targetFiles=$(find ~/scripts -follow -maxdepth 1 -name "*.sh")
  local selected=$(echo "$targetFiles" | fzf-tmux -p80% --preview '{bat --color always {}}')
  [ -z "$selected" ] && return
  sh $selected
}


# git危険コマンド集
alias dgg='_danger_git_commands'
_danger_git_commands() {
  local actions=(
    'n個前のコミットに遡って書き換えるコマンドを表示:_rebase_commit'
    '特定ファイルと関連する履歴を全て削除:_delete_all_histories_by_file'
    'masterのコミットを全て削除:_delete_all_git_log'
    'コミットのAuthorを全て書き換える:_change_author'
    'ローカル(特定リポジトリ)のConfigを変更:_change_config_local'
  )
  local action=$(echo "${actions[@]}" | tr ' ' '\n' | fzf -d ':' --with-nth=1 | cut -d ':' -f 2,2)
  [ -n "$action" ] && eval "$action"
}

# 複数個前のコミットを書き換えるコマンドの流れを表示する
_rebase_commit() {
  cat <<EOS
# 1. 修正したい変更をstashしておく
`printf "\e[33mgit stash\e[m\n"`
# 2. 遡りたい個数を指定
`printf "\e[33mgit rebase -i HEAD~3\e[m\n"`
# 3. 遡りたいコミットを'edit'にする
# 4. rebaseモードに入ったらstashを戻す
`printf "\e[33mgit stash pop\e[m\n"`
# 5. addしてcommit --amendする
`printf "\e[33mgit add -A\ngit commit --amend\e[m\n"`
# 6. rebaseモードを抜ける
`printf "\e[33mgit rebase --continue\e[m\n"`
EOS
}

# 特定ファイルの履歴を全て削除(ファイルも削除されるので注意)
_delete_all_histories_by_file() {
  local targetFile=$(find . -type f -not -path "./.git/*" -not -path "./Carthage/*" -not -path "./*vendor/*" | fzf)
  test -z "$targetFile" && return
  git filter-branch -f --tree-filter "rm -f $targetFile" HEAD
  git gc --aggressive --prune=now
}

# masterのコミットを全て削除する(自分のPublicリポジトリにpushする際使用)
_delete_all_git_log() {
  local PC_ENV=`cat ~/account.json | jq -r '.pc_env["'$USER'"]'`
  printf "env: \e[37;1m${PC_ENV}\e[m\n"
  # プライベートPCではない場合、確認を取る
  if [ "$PC_ENV" != 'private' ]; then
    printf "\e[31mThis computer is not private.\nDo you continue? (y/n)\e[m"
    read isContinue
    case "${isContinue}" in
      y|Y|yes)
        ;;
      *)
        printf "\e[33mcanceled!\e[m\n"
        return 0
        ;;
    esac
  fi
  /bin/echo -n '本当に実行して良いですか？(y/N) > '
  read isOK
  case "${isOK}" in
    y|Y|yes)
      git checkout --orphan tmp
      git commit -m "first commit"
      git checkout -B master
      git branch -d tmp
      ;;
    *)
      ;;
  esac
}

# コミットのAuthor、Committerを全て変更
_change_author() {
  local USER_NAME=`cat ~/account.json | jq -r '.github["user_name"]'`
  local MAIL_ADDR=`cat ~/account.json | jq -r '.github["mail_addr"]'`
  test "$USER_NAME" = "null" || test "$MAIL_ADDR" = "null" && return
  echo -n "AUTHOR: $USER_NAME\nEMAIL: $MAIL_ADDR\nに書き換えますがよろしいですか？(y/N) > "
  read isOK
  case "${isOK}" in
    y|Y|yes)
      git filter-branch -f --env-filter \
      "GIT_AUTHOR_NAME='${USER_NAME}'; \
      GIT_AUTHOR_EMAIL='${MAIL_ADDR}'; \
      GIT_COMMITTER_NAME='${USER_NAME}'; \
      GIT_COMMITTER_EMAIL='${MAIL_ADDR}';" \
      HEAD
      ;;
    *)
      ;;
  esac
}

# ローカル(特定リポジトリ)のユーザー名,メールアドレスを変更
_change_config_local() {
  local USER_NAME=`cat ~/account.json | jq -r '.github["user_name"]'`
  local MAIL_ADDR=`cat ~/account.json | jq -r '.github["mail_addr"]'`
  test "$USER_NAME" = "null" || test "$MAIL_ADDR" = "null" && return
  echo -n "AUTHOR: $USER_NAME\nEMAIL: $MAIL_ADDR\nに書き換えますがよろしいですか？(y/N) > "
  read isOK
  case "${isOK}" in
    y|Y|yes)
      git config --local user.name "${USER_NAME}"
      git config --local user.email "${MAIL_ADDR}"
      ;;
    *)
      ;;
  esac
}

# vim関連ファイルをfzfで選択しvimで開く
alias vimrc='_edit_vim_files'
_edit_vim_files() {
  local nvimFiles=$(find ~/dotfiles ${XDG_CONFIG_HOME}/nvim/myautoload -follow -name "*.vim")
  local deinToml=~/dotfiles/vim/dein.toml
  local xvimrc=~/dotfiles/vim/xvimrc
  # 文字数でソートする
  local editFile=$(echo "${nvimFiles}\n${deinToml}\n${xvimrc}" | awk '{ print length, $0 }' | sort -n -s | cut -d" " -f2- | fzf-tmux -p80% --preview "bat --color always {}")
  test -z "$editFile" && return
  vim $editFile
}

# zshrc関連ファイルをfzfで選択しvimで開く
alias zshrc='_edit_zsh_files'
_edit_zsh_files() {
  local zshFiles=$(find ~/dotfiles/zsh -type f && echo ~/.zshrc.local)
  # 文字数でソートする
  local editFiles=($(echo "$zshFiles" | awk '{ print length, $0 }' | sort -n -s | cut -d" " -f2- | fzf-tmux -p80% --preview "bat --color always {}"))
  test -z "$editFiles" && return
  vim -p "${editFiles[@]}"
}

